apiVersion: v1
kind: Pod
metadata:
  name: {{ template "common.names.fullname" . }}-cluster-backup
  namespace: {{ .Release.Namespace | quote }}
  labels: {{- include "common.labels.standard" . | nindent 2 }}
    {{- if .Values.commonLabels }}
    {{- include "common.tplvalues.render" ( dict "value" .Values.commonLabels "context" $ ) | nindent 2 }}
    {{- end }}
  annotations:
    {{- if .Values.backupJob.annotations }}
    {{- include "common.tplvalues.render" ( dict "value" .Values.backupJob.annotations "context" $ ) | nindent 2 }}
    {{- end }}
    {{- if .Values.commonAnnotations }}
    {{- include "common.tplvalues.render" ( dict "value" .Values.commonAnnotations "context" $ ) | nindent 2 }}
    {{- end }}
spec:
  {{- include "redis-cluster.imagePullSecrets" . | nindent 2 }}
  {{- if .Values.backupJob.hostAliases }}
  hostAliases: {{- include "common.tplvalues.render" (dict "value" .Values.backupJob.hostAliases "context" $) | nindent 4 }}
  {{- end }}
  {{- if .Values.backupJob.affinity }}
  affinity: {{- include "common.tplvalues.render" (dict "value" .Values.backupJob.affinity "context" $) | nindent 4 }}
  {{- else }}
  affinity:
    podAffinity: {{- include "common.affinities.pods" (dict "type" .Values.backupJob.podAffinityPreset "context" $) | nindent 6 }}
    podAntiAffinity: {{- include "common.affinities.pods" (dict "type" .Values.backupJob.podAntiAffinityPreset "context" $) | nindent 6 }}
    nodeAffinity: {{- include "common.affinities.nodes" (dict "type" .Values.backupJob.nodeAffinityPreset.type "key" .Values.backupJob.nodeAffinityPreset.key "values" .Values.backupJob.nodeAffinityPreset.values) | nindent 6 }}
  {{- end }}
  {{- if .Values.backupJob.nodeSelector }}
  nodeSelector: {{- include "common.tplvalues.render" (dict "value" .Values.backupJob.nodeSelector "context" $) | nindent 2 }}
  {{- end }}
  {{- if .Values.backupJob.tolerations }}
  tolerations: {{- include "common.tplvalues.render" (dict "value" .Values.backupJob.tolerations "context" $) | nindent 2 }}
  {{- end }}
  {{- if .Values.backupJob.priorityClassName }}
  priorityClassName: {{ .Values.backupJob.priorityClassName }}
  {{- end }}
  {{- if .Values.podSecurityContext.enabled }}
  securityContext: {{- omit .Values.podSecurityContext "enabled" | toYaml | nindent 2 }}
  {{- end }}
  serviceAccountName: {{ include "redis-cluster.serviceAccountName" . }}
  {{- if .Values.backupJob.initContainers }}
  initContainers: {{- include "common.tplvalues.render" (dict "value" .Values.backupJob.initContainers "context" $) | nindent 2 }}
  {{- end }}
  containers:
  - name: backup
    image: ysyoo/redis-tool:0.5
    imagePullPolicy: {{ .Values.image.pullPolicy | quote }}
    {{- if .Values.containerSecurityContext.enabled }}
    securityContext: {{- omit .Values.containerSecurityContext "enabled" | toYaml | nindent 4 }}
    {{- end }}
    {{- if .Values.diagnosticMode.enabled }}
    command: {{- include "common.tplvalues.render" (dict "value" .Values.diagnosticMode.command "context" $) | nindent 4 }}
    {{- else if .Values.backupJob.command }}
    command: {{- include "common.tplvalues.render" (dict "value" .Values.backupJob.command "context" $) | nindent 4 }}
    {{- else }}
    command: ['/bin/bash', '-c']
    {{- end }}
    {{- if .Values.diagnosticMode.enabled }}
    args: {{- include "common.tplvalues.render" (dict "value" .Values.diagnosticMode.args "context" $) | nindent 4 }}
    {{- else if .Values.backupJob.args }}
    args: {{- include "common.tplvalues.render" (dict "value" .Values.backupJob.args "context" $) | nindent 4 }}
    {{- else }}
    args:
      - |
        ls -al /
        ls -al /opt/bitnami
        . /opt/bitnami/scripts/libnet.sh
        . /opt/bitnami/scripts/libos.sh
 
        firstNodeIP=$(wait_for_dns_lookup {{ template "common.names.fullname" . }}-0.{{ template "common.names.fullname" . }}-headless 120 5)
        echo $firstNodeIp

        # master nodes.
        {{- if .Values.cluster.externalAccess.enabled }}
        newNodeCounter=0
        
        # number of currently deployed redis master nodes
        currentMasterNodesNum="$(( {{ .Values.cluster.update.currentNumberOfNodes }} / (( {{ .Values.cluster.update.currentNumberOfReplicas }} + 1 )) ))"
        echo $currentMasterNodesNum

        # end postion of new replicas that should be assigned to original redis master nodes
        slaveNodesEndPos="$(( {{ .Values.cluster.update.currentNumberOfNodes }} + (($REDIS_CLUSTER_REPLICAS - {{ .Values.cluster.update.currentNumberOfReplicas }})) * $currentMasterNodesNum ))"
        echo $slaveNodesEndPos

        for node in $(seq $((1+{{ .Values.cluster.update.currentNumberOfNodes }})) {{ .Values.cluster.nodes }}); do
          newNodeIndex="$(($node - 1))"

          ## ready -- pong
          newNodeIP=$(wait_for_dns_lookup "{{ template "common.names.fullname" . }}-${newNodeIndex}.{{ template "common.names.fullname" . }}-headless" 120 5)
          {{- if .Values.tls.enabled }}
          while [[ $(redis-cli -h "$newNodeIP" -p "$REDIS_TLS_PORT" --tls --cert ${REDIS_TLS_CERT_FILE} --key ${REDIS_TLS_KEY_FILE} --cacert ${REDIS_TLS_CA_FILE} ping) != 'PONG' ]]; do
          {{- else }}
          while [[ $(redis-cli -h "$newNodeIP" -p "$REDIS_PORT" ping) != 'PONG' ]]; do
          {{- end }}
            echo "Node $newNodeIP not ready, waiting for all the nodes to be ready..."
            newNodeIP=$(wait_for_dns_lookup "{{ template "common.names.fullname" . }}-${newNodeIndex}.{{ template "common.names.fullname" . }}-headless" 120 5)
            sleep 5
          done
          
          ## command
          slave=()
          # when the index of the new node is less than `slaveNodesEndPos`，the added node is a replica that assigned to original redis master node
          # when the index of the new node is greater than or equal to `slaveNodesEndPos`，and it is not a multiple of `$REDIS_CLUSTER_REPLICAS + 1`, the added node is a replica that assigned to newly added master node
          if (( $REDIS_CLUSTER_REPLICAS >= 1 )) && (( (( $newNodeIndex < $slaveNodesEndPos )) || (( (( $newNodeIndex >= $slaveNodesEndPos )) && (( $newNodeIndex % (( $REDIS_CLUSTER_REPLICAS + 1 )) )) )) )); then
            slave+=("--cluster-slave")
          fi
          {{- if .Values.tls.enabled }}
          while ! redis-cli --cluster add-node --tls --cert ${REDIS_TLS_CERT_FILE} --key ${REDIS_TLS_KEY_FILE} --cacert ${REDIS_TLS_CA_FILE} "${newNodeIP}:${REDIS_TLS_PORT}" "${firstNodeIP}:${REDIS_TLS_PORT}" ${slave[@]}; do
          {{- else }}
          while ! redis-cli --cluster add-node "${newNodeIP}:${REDIS_PORT}" "${firstNodeIP}:${REDIS_PORT}" ${slave[@]}; do
          {{- end }}
            echo "Add-node ${newNodeIndex} ${newNodeIP} failed, retrying"
            sleep 5
            firstNodeIP=$(wait_for_dns_lookup "{{ template "common.names.fullname" . }}-0.{{ template "common.names.fullname" . }}-headless" 120 5)
            newNodeIP=$(wait_for_dns_lookup "{{ template "common.names.fullname" . }}-${newNodeIndex}.{{ template "common.names.fullname" . }}-headless" 120 5)
          done
        done 
        # for done

        # backup command
        redis-cli --cluster "${firstNodeIP}:${REDIS_PORT}" bgsave
        redis-cli --rdb "${firstNodeIP}:${REDIS_PORT}" 

    {{- end }}
    env:
      - name: BITNAMI_DEBUG
        value: {{ ternary "true" "false" (or .Values.image.debug .Values.diagnosticMode.enabled) | quote }}
      {{- if .Values.cluster.externalAccess.enabled }}
      {{- if .Values.tls.enabled }}
      - name:  REDIS_TLS_CERT_FILE
        value: {{ template "redis-cluster.tlsCert" . }}
      - name:  REDIS_TLS_KEY_FILE
        value: {{ template "redis-cluster.tlsCertKey" . }}
      - name:  REDIS_TLS_CA_FILE
        value: {{ template "redis-cluster.tlsCACert" . }}
      - name: REDIS_TLS_PORT
      {{- else }}
      - name: REDIS_PORT
      {{- end }}
        value: {{ .Values.cluster.externalAccess.service.port | quote }}
      {{- else }}
      {{- if .Values.tls.enabled }}
      - name:  REDIS_TLS_CERT_FILE
        value: {{ template "redis-cluster.tlsCert" . }}
      - name:  REDIS_TLS_KEY_FILE
        value: {{ template "redis-cluster.tlsCertKey" . }}
      - name:  REDIS_TLS_CA_FILE
        value: {{ template "redis-cluster.tlsCACert" . }}
      - name: REDIS_TLS_PORT
      {{- else }}
      - name: REDIS_PORT
      {{- end }}
        value: {{ .Values.redis.containerPorts.redis | quote }}
      {{- end }}
      - name: REDIS_CLUSTER_REPLICAS
        value: {{ .Values.cluster.replicas | quote }}
      {{- if .Values.usePassword }}
      - name: REDISCLI_AUTH
        valueFrom:
          secretKeyRef:
            name: {{ template "redis-cluster.secretName" . }}
            key: {{ template "redis-cluster.secretPasswordKey" . }}
      {{- end }}
      {{- if .Values.backupJob.extraEnvVars }}
      {{- include "common.tplvalues.render" (dict "value" .Values.backupJob.extraEnvVars "context" $) | nindent 4 }}
      {{- end }}
    {{- if or .Values.backupJob.extraEnvVarsCM .Values.backupJob.extraEnvVarsSecret }}
    envFrom:
      {{- if .Values.backupJob.extraEnvVarsCM }}
      - configMapRef:
          name: {{ include "common.tplvalues.render" (dict "value" .Values.backupJob.extraEnvVarsCM "context" $) }}
      {{- end }}
      {{- if .Values.backupJob.extraEnvVarsSecret }}
      - secretRef:
          name: {{ include "common.tplvalues.render" (dict "value" .Values.backupJob.extraEnvVarsSecret "context" $) }}
      {{- end }}
    {{- end }}
    {{- if .Values.backupJob.resources }}
    resources: {{- toYaml .Values.backupJob.resources | nindent 4 }}
    {{- end }}
    {{- if or .Values.tls.enabled .Values.backupJob.extraVolumeMounts }}
    volumeMounts:
      {{- if .Values.tls.enabled }}
      - name: redis-certificates
        mountPath: /opt/bitnami/redis/certs
        readOnly: true
      {{- end }}
      {{- if .Values.backupJob.extraVolumeMounts }}
      {{- include "common.tplvalues.render" (dict "value" .Values.backupJob.extraVolumeMounts "context" $) | nindent 4 }}
      {{- end }}
    {{- end }}
  restartPolicy: OnFailure
  {{- if or .Values.tls.enabled .Values.backupJob.extraVolumes }}
  volumes:
    {{- if .Values.tls.enabled }}
    - name: redis-certificates
      secret:
        secretName: {{ include "common.tplvalues.render" (dict "value" .Values.tls.certificatesSecret "context" $) }}
    {{- end }}
    {{- if .Values.backupJob.extraVolumes }}
    {{- include "common.tplvalues.render" (dict "value" .Values.backupJob.extraVolumes "context" $) | nindent 2 }}
    {{- end }}
  {{- end }}