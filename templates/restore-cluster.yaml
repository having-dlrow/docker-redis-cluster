{{- if .Values.restoreJob.enabled }}
apiVersion: batch/v1
kind: CronJob
metadata:
  name: {{ template "common.names.fullname" . }}-restore
  namespace: {{ .Release.Namespace | quote }}
spec:
  startingDeadlineSeconds: 120
  schedule: {{ .Values.restoreJob.schedule | quote }}
  jobTemplate:
    spec:
      template:
        spec:
          containers:
            - name: restore
              image: {{ .Values.restoreJob.image | quote }}
              {{- if .Values.containerSecurityContext.enabled }}
              securityContext: {{- omit .Values.containerSecurityContext "enabled" | toYaml | nindent 16 }}
              {{- end }}
              {{- if .Values.diagnosticMode.enabled }}
              command: {{- include "common.tplvalues.render" (dict "value" .Values.diagnosticMode.command "context" $) | nindent 16 }}
              {{- else if .Values.restoreJob.command }}
              command: {{- include "common.tplvalues.render" (dict "value" .Values.restoreJob.command "context" $) | nindent 16 }}
              {{- else }}
              command: ['/bin/bash', '-c']
              {{- end }}
              {{- if .Values.diagnosticMode.enabled }}
              args: {{- include "common.tplvalues.render" (dict "value" .Values.diagnosticMode.args "context" $) | nindent 16 }}
              {{- else if .Values.restoreJob.args }}
              args: {{- include "common.tplvalues.render" (dict "value" .Values.restoreJob.args "context" $) | nindent 16 }}
              {{- else }}
              args:
                - |
                  # set password
                  cp /restore.toml /workspace/restore.toml
                  sed -i "s/password = \"\"/password = \"$REDISCLI_AUTH\"/g" /workspace/restore.toml

                  # script
                  script_path="/workspace/redis-tool.sh"

                  if [ -f "$script_path" ]; then
                      bash "$script_path" restore
                  else
                      echo "Script does not exist: $script_path"
                  fi
                  sleep 60
              {{- end }}
              env:
                {{- if .Values.cluster.externalAccess.enabled }}
                {{- if .Values.tls.enabled }}
                - name: REDIS_TLS_CERT_FILE
                  value: {{ template "redis-cluster.tlsCert" . }}
                - name: REDIS_TLS_KEY_FILE
                  value: {{ template "redis-cluster.tlsCertKey" . }}
                - name: REDIS_TLS_CA_FILE
                  value: {{ template "redis-cluster.tlsCACert" . }}
                - name: REDIS_TLS_PORT_NUMBER
                {{- else }}
                - name: REDIS_PORT_NUMBER
                {{- end }}
                  value: {{ .Values.cluster.externalAccess.service.port | quote }}
                {{- else }}
                {{- if .Values.tls.enabled }}
                - name: REDIS_TLS_CERT_FILE
                  value: {{ template "redis-cluster.tlsCert" . }}
                - name: REDIS_TLS_KEY_FILE
                  value: {{ template "redis-cluster.tlsCertKey" . }}
                - name: REDIS_TLS_CA_FILE
                  value: {{ template "redis-cluster.tlsCACert" . }}
                - name: REDIS_TLS_PORT_NUMBER
                {{- else }}
                - name: REDIS_PORT_NUMBER
                {{- end }}
                  value: {{ .Values.redis.containerPorts.redis | quote }}
                {{- end }}
                - name: REDIS_CLUSTER_NAME
                  value: {{ template "common.names.fullname" . }}
                - name: REDIS_CLUSTER_NAMESPACE
                  value: {{ .Release.Namespace | quote }}
                - name: CURRENT_MASTER_NODE_NUM
                  value: {{ .Values.cluster.update.currentNumberOfNodes | quote }}
                - name: REDIS_CLUSTER_REPLICAS
                  value: {{ .Values.cluster.replicas | quote }}
                {{- if .Values.usePassword }}
                - name: REDISCLI_AUTH
                  valueFrom:
                    secretKeyRef:
                      name: {{ template "redis-cluster.secretName" . }}
                      key: {{ template "redis-cluster.secretPasswordKey" . }}
                {{- end }}
                {{- if .Values.restoreJob.extraEnvVars }}
                {{- include "common.tplvalues.render" (dict "value" .Values.restoreJob.extraEnvVars "context" $) | nindent 16 }}
                {{- end }}
              {{- if or .Values.restoreJob.extraEnvVarsCM .Values.restoreJob.extraEnvVarsSecret }}
              envFrom:
                {{- if .Values.restoreJob.extraEnvVarsCM }}
                - configMapRef:
                    name: {{ include "common.tplvalues.render" (dict "value" .Values.restoreJob.extraEnvVarsCM "context" $) }}
                {{- end }}
                {{- if .Values.restoreJob.extraEnvVarsSecret }}
                - secretRef:
                    name: {{ include "common.tplvalues.render" (dict "value" .Values.restoreJob.extraEnvVarsSecret "context" $) }}
                {{- end }}
              {{- end }}
              {{- if .Values.restoreJob.resources }}
              resources: {{- toYaml .Values.restoreJob.resources | nindent 16 }}
              {{- end }}
              volumeMounts:
                - name: config-volume
                  mountPath: /restore.toml
                  subPath: restore.toml       
              {{- if or .Values.tls.enabled .Values.restoreJob.extraVolumeMounts }}
                {{- if .Values.tls.enabled }}
                - name: redis-certificates
                  mountPath: /opt/bitnami/redis/certs
                  readOnly: true
                {{- end }}
                {{- if .Values.restoreJob.extraVolumeMounts }}
                {{- include "common.tplvalues.render" (dict "value" .Values.restoreJob.extraVolumeMounts "context" $) | nindent 18 }}
                {{- end }}
              {{- end }}
          volumes:
            - name: config-volume
              configMap:
                name: {{ include "common.names.fullname" . }}-restore-config
                defaultMode: 0755  
          restartPolicy: OnFailure
      ttlSecondsAfterFinished: 3600
  successfulJobsHistoryLimit: 3  # completed history
  failedJobsHistoryLimit: 1      # fail history
{{- end }}
